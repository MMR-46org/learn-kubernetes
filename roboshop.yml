apiVersion: v1
kind:  Pod
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  containers:
    - name: nginx
      image: madhanmohanreddyeeda/github-repo-frontend
      imagePullPolicy: Always

---
apiVersion: v1
kind: Pod
metadata:
  name: catalogue
  labels:
    app: catalogue
spec:
  initContainers:
    - name: parameters-pull
      image: docker.io/madhanmohanreddyeeda/github-repo-parameter-store-init-container-image
      imagePullPolicy: Always
      volumeMounts:
        - mountPath: /parameters
          name: parameters
      env:
        - name: PARAMS
          value: "dev.roboshop.catalogue.MONGO_URL,MONGO_URL"
  containers:
    - name: catalogue
      image: madhanmohanreddyeeda/github-repo-catalogue
      volumeMounts:
      - mountPath: /parameters
        name: parameters
  volumes:
    - name: parameters
      emptyDir: {}


---
apiVersion: batch/v1
kind: Job
metadata:
  name: catalogue-schema-load
spec:
  template:
    spec:
      volumes:
        - name: parameters
          emptyDir: { }
      initContainers:
        - name: parameters-pull
          image: docker.io/madhanmohanreddyeeda/github-repo-parameter-store-init-container-image
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /parameters
              name: parameters
          env:
            - name: PARAMS
              value: "dev.roboshop.docdb.username,DOCDB_USER dev.roboshop.docdb.password,DOCDB_PASS dev.roboshop.docdb.endpoint,DOCDB_ENDPOINT"
      containers:
        - name: schema-load
          image: docker.io/madhanmohanreddyeeda/github-repo-schema-loader
          imagePullPolicy: Always
          env:
            - name: COMPONENT
              value: catalogue
            - name: SCHEMA_TYPE
              value: mongo
          volumeMounts:
            - mountPath: /parameters
              name: parameters
      restartPolicy: Never
  backoffLimit: 4


---


apiVersion: v1
kind: Pod
metadata:
  name: cart
  labels:
    app: cart
spec:
  initContainers:
    - name: parameters-pull
      image: docker.io/madhanmohanreddyeeda/github-repo-parameter-store-init-container-image
      imagePullPolicy: Always
      volumeMounts:
        - mountPath: /parameters
          name: parameters
      env:
        - name: PARAMS
          value:  "dev.roboshop.cart.REDIS_HOST,REDIS_HOST dev.roboshop.cart.CATALOGUE_HOST,CATALOGUE_HOST  dev.roboshop.cart.CATALOGUE_PORT,CATALOGUE_PORT "
  containers:
    - name: cart
      image: madhanmohanreddyeeda/github-repo-cart
      volumeMounts:
        - mountPath: /parameters
          name: parameters
  volumes:
    - name: parameters
      emptyDir: { }

---
apiVersion: v1
kind: Pod
metadata:
  name: shipping
  labels:
    app: shipping
spec:
  containers:
    - name: shipping
      image: madhanmohanreddyeeda/github-repo-shipping

---
apiVersion: v1
kind: Pod
metadata:
  name: payment
  labels:
    app: payment
spec:
  containers:
    - name: payment
      image: madhanmohanreddyeeda/github-repo-payment

---
apiVersion: v1
kind: Pod
metadata:
  name: dispatch
  labels:
    app: dispatch
spec:
  containers:
    - name: dispatch
      image: madhanmohanreddyeeda/github-repo-dispatch

---
apiVersion: v1
kind: Pod
metadata:
  name: user
  labels:
    app: user
spec:
  initContainers:
    - name: parameters-pull
      image: docker.io/madhanmohanreddyeeda/github-repo-parameter-store-init-container-image
      imagePullPolicy: Always
      volumeMounts:
        - mountPath: /parameters
          name: parameters
      env:
        - name: PARAMS
          value: "dev.roboshop.user.MONGO_URL,MONGO_URL  dev.roboshop.user.REDIS_HOST,REDIS_HOST"
  containers:
    - name: user
      image: madhanmohanreddyeeda/github-repo-user
      volumeMounts:
        - mountPath: /parameters
          name: parameters
  volumes:
    - name: parameters
      emptyDir: { }

---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
#  type: LoadBalancer  // this is one of the option for creating a load balancer.
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: catalogue
spec:
  selector:
    app: catalogue
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

---

apiVersion: v1
kind: Service
metadata:
  name: user
spec:
  selector:
    app: user
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

---

apiVersion: v1
kind: Service
metadata:
  name: cart
spec:
  selector:
    app: cart
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

---

apiVersion: v1
kind: Service
metadata:
  name: shipping
spec:
  selector:
    app: shipping
  ports:
    -  protocol: TCP
       port: 80
       targetPort: 8080

---

apiVersion: v1
kind: Service
metadata:
  name: payment
spec:
  selector:
    app: payment
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

---

apiVersion: v1
kind: Service
metadata:
  name: dispatch
spec:
  selector:
    app: dispatch
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080


---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
    name: frontend
    annotations:
      external-dns.alpha.kubernetes.io/hostname: frontend-dev.madhanmohanreddy.tech
spec:
    ingressClassName: nginx
    rules:
      - host: frontend-dev.madhanmohanreddy.tech
        http:
          paths:
            - pathType: Prefix
              backend:
                service:
                  name: frontend
                  port:
                    number: 80
              path: /


